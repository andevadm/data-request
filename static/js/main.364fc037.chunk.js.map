{"version":3,"sources":["components/Header.js","components/Footer.js","components/DataRequest.js","components/DataTable.js","components/DataItem.js","components/DataContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","href","DataRequest","handleRequest","useState","method","setMethod","extension","setExtension","id","value","readOnly","disabled","onChange","event","target","onClick","DataTable","dataArray","requestParameters","handleSelect","length","idSelected","tagName","rowSelected","parentNode","previousSelected","getElementsByClassName","classList","remove","add","firstChild","textContent","map","item","DataTableItem","key","style","textTransform","time","name","DataItem","src","process","image","alt","description","density","DataContainer","data","setData","setIdSelected","setRequestParameters","dataPath","a","startTime","Date","now","fetch","response","ok","console","log","text","dataString","processJSON","processXML","DOMParser","parseFromString","JSON","parse","dataXML","getElementsByTagName","dataItem","getAttribute","children","property","propertyTag","trim","isNaN","parseFloat","push","dataSource","preventDefault","dataFileName","request","XMLHttpRequest","onreadystatechange","this","readyState","status","responseText","responseXML","open","send","getXMLHttp","getFetch","toLocaleTimeString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.364fc037.chunk.js","sourcesContent":["/*    Header.js     */\r\n/* header component */\r\n\r\nimport React from 'react';\r\nimport '../styles/Header.scss';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1>\r\n      \tData Request App\r\n      </h1>\r\n      <p>\r\n      \tSimple SPA created with React\r\n      </p>\r\n    </header>\r\n  );\r\n}","/*    Footer.js     */\r\n/* footer component */\r\n\r\nimport React from 'react';\r\nimport '../styles/Footer.scss';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer className=\"Footer\">\r\n      Source files are located in&nbsp;  \r\n\t  <a href=\"https://github.com/andevadm/data-request\">GitHub&nbsp;repository</a>\r\n    </footer>\r\n  );\r\n}","/*     DataRequest.js     */\r\n/* request form component */\r\n\r\nimport React, { useState } from 'react';\r\nimport '../styles/DataRequest.scss';\r\n\r\nexport default function DataRequest({handleRequest}) {\r\n\r\n  // state with selected method of request\r\n  const [method, setMethod] = useState('Fetch');\r\n  // state with selected extension of data\r\n  const [extension, setExtension] = useState('json');\r\n  // name of data file without extension\r\n  // only one data source is present, state is not necessary\r\n  const dataSource = 'materials';\r\n\r\n  // handler for selecting method of request\r\n  const handleSelectMethod = (event) => setMethod(event.target.value);\r\n\r\n  // handler for selecting extension of data\r\n  const handleSelectExtension = (event) => setExtension(event.target.value);\r\n\r\n  return (\r\n    <div className=\"DataRequest\">\r\n      <h2>\r\n      \tData Request Form\r\n      </h2>\r\n      <form>\r\n        <label>\r\n          Data source:\r\n          <select id=\"database\" value={dataSource} readOnly disabled>\r\n            <option value={dataSource}>{dataSource}</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          Select request method:\r\n          <select id=\"method\" value={method} onChange={handleSelectMethod}>\r\n            <option value=\"Fetch\">Fetch</option>\r\n            <option value=\"XMLHttpRequest\">XMLHttpRequest</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          Select data extension:\r\n          <select id=\"extension\" value={extension} onChange={handleSelectExtension}>\r\n            <option value=\"json\">JSON</option>\r\n            <option value=\"xml\">XML</option>\r\n          </select>\r\n        </label>\r\n      \t<label>\r\n          Press the button to obtain data\r\n      \t  <button id=\"request\" onClick={ (event) => handleRequest(event, dataSource, method, extension) }>\r\n            Request\r\n          </button>\r\n        </label>\r\n      </form>\r\n    </div>\r\n  );\r\n}","/*   DataTable.js   */\r\n/* component with obtained data and parameters of response */\r\n/* component with table item */\r\n\r\nimport React from 'react';\r\nimport '../styles/DataTable.scss';\r\n\r\nexport default function DataTable({dataArray, requestParameters, handleSelect}) {\r\n\r\n  // handler for click on the table\r\n  const handleClick = (event) => {\r\n    let idSelected;\r\n    if ( event.target.tagName === 'TD' ) {\r\n      const rowSelected = event.target.parentNode;\r\n      const previousSelected = rowSelected.parentNode.getElementsByClassName('selected')[0];\r\n      // remove previous selection\r\n      if ( previousSelected ) {\r\n        previousSelected.classList.remove(\"selected\");\r\n      }\r\n      // add new selection\r\n      if ( rowSelected !== previousSelected ) {\r\n        rowSelected.classList.add(\"selected\");\r\n        idSelected = +rowSelected.firstChild.textContent;\r\n      // or remove current selection\r\n      } else {\r\n        idSelected = -1;\r\n      }\r\n      // process data item\r\n      handleSelect(idSelected);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"DataTable\">\r\n      {\r\n        (dataArray.length === 0) ? \r\n          <h2>Data is not obtained</h2> :\r\n          <>\r\n            <h2>\r\n              Obtained Data\r\n            </h2>       \r\n            <table onClick={handleClick}>\r\n              <tbody>\r\n                {\r\n                  dataArray.map( (item) =>\r\n                    <DataTableItem key={item.id} item={item} />\r\n                  )\r\n                }\r\n              </tbody>        \r\n            </table>\r\n            <div className=\"request-parameters\">\r\n              <p>\r\n                Get method: <em>{requestParameters.method}</em>\r\n              </p>\r\n              <p>\r\n                Data extension: <em style={{ textTransform: 'uppercase' }}>{requestParameters.extension}</em>\r\n              </p>\r\n              <p>\r\n                Time of data processing: <em>{requestParameters.time}&nbsp;ms</em>\r\n              </p>\r\n            </div>\r\n          </>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DataTableItem({item}) {\r\n  return (\r\n    <tr className=\"DataTableItem\">\r\n      <td>{item.id}</td>\r\n      <td>{item.name}</td>\r\n    </tr>\r\n  );\r\n}","/*     DataItem.js     */\r\n/* component with information about selected item in DataTable */\r\n\r\nimport React from 'react';\r\nimport '../styles/DataItem.scss';\r\n\r\nexport default function DataItem({item}) {\r\n  return (\r\n    <div className=\"DataItem\">\r\n      {\r\n      \t(!item) ?\r\n      \t<h2>No item is selected</h2> :\r\n      \t<>\r\n\t\t\t    <h2>\r\n\t\t\t      {item.name}\r\n\t\t\t    </h2>\r\n\t\t\t    <div className=\"item-image\">\r\n\t\t\t\t\t\t<img src={ process.env.PUBLIC_URL + \"/data/img/\" + item.image } alt={item.name} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"item-body\">\r\n\t\t\t\t\t  <div className=\"item-description\">\r\n\t\t\t\t\t    {item.description}\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t\t  <div className=\"item-value\">\r\n\t\t\t\t\t    Density: <em>{item.density}&nbsp;g/cm<sup>3</sup></em>\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t  \t}\r\n    </div>\r\n  );\r\n}","/*       DataContainer.js          */\r\n/* layout and state root component */\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport '../styles/DataContainer.scss';\r\nimport DataRequest from './DataRequest';\r\nimport DataTable from './DataTable';\r\nimport DataItem from './DataItem';\r\n\r\nexport default function DataContainer() {\r\n\r\n  // state with data array from server\r\n  const [data, setData] = useState([]);\r\n  // state with id of selected data item\r\n  const [idSelected, setIdSelected] = useState(-1);\r\n  // state with request parameters:\r\n  const [requestParameters, setRequestParameters] = useState(\r\n      {\r\n        time: 0, // time of data processing from the beginning of request\r\n        method: 'Fetch', // AJAX method\r\n        extension: 'json' // extension of data file on a server\r\n      }\r\n    )\r\n\r\n  // get data by XMLHttpRequest from URL in dataPath\r\n  function getXMLHttp(dataPath, extension) {\r\n    let dataString, dataXML;\r\n    const startTime = Date.now();\r\n    try {\r\n      let request = new XMLHttpRequest();\r\n      // old method using onreadystatechange event is selected \r\n      request.onreadystatechange = function() {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n          console.log('XMLHttpRequest is ready');\r\n          switch (extension) {\r\n            case 'json':\r\n              dataString = this.responseText;\r\n              processJSON(dataString);\r\n              break;\r\n            case 'xml':\r\n              dataXML = this.responseXML;\r\n              processXML(dataXML);\r\n              break;\r\n            default:\r\n              console.log('Error in data extension for XMLHttpRequest');\r\n          }        \r\n          setRequestParameters({ \r\n              time: Date.now() - startTime, \r\n              method: 'XMLHttpRequest',\r\n              extension: extension \r\n          });\r\n        }\r\n      }\r\n      request.open(\"GET\", dataPath, true);\r\n      request.send();\r\n    } catch {\r\n      console.log('Error within XMLHttpRequest');\r\n    }\r\n  }\r\n\r\n  // get data by Fetch from URL in dataPath\r\n  async function getFetch(dataPath, extension) {\r\n    let dataString, dataXML;\r\n    const startTime = Date.now();\r\n    try {\r\n      let response = await fetch(dataPath);\r\n      if (response.ok) {\r\n        console.log('Fetch response is ready');\r\n        // response.json is not used to apply the same data processing functions for all request methods\r\n        dataString = await response.text();\r\n        switch (extension) {\r\n          case 'json':\r\n            processJSON(dataString);\r\n            break;\r\n          case 'xml':                       \r\n            dataXML = (new DOMParser()).parseFromString(dataString,\"text/xml\");\r\n            processXML(dataXML);\r\n            break;\r\n          default:\r\n            console.log('Error in data extension for Fetch request');\r\n        }      \r\n        setRequestParameters({ \r\n            time: Date.now() - startTime, \r\n            method: 'Fetch',\r\n            extension: extension \r\n        });\r\n      }\r\n    } catch {\r\n      console.log('Error within Fetch request');\r\n    }\r\n  }\r\n\r\n  // get array from JSON string and set data state\r\n  function processJSON(dataString) {\r\n    try {\r\n      setData( JSON.parse(dataString) );\r\n      console.log('JSON data is processed successfully');\r\n    } catch {\r\n      console.log('Error in the obtained JSON data');\r\n    }  \r\n  }\r\n\r\n  // get array from XML object and set data state\r\n  function processXML(dataXML) {\r\n    try {\r\n      let dataArray = [];\r\n      for (let item of dataXML.getElementsByTagName(\"item\")) {\r\n        let dataItem = {}; // item of data array\r\n        dataItem.id = +item.getAttribute('id');\r\n        for (let property of item.children) {\r\n          const propertyTag = property.tagName;\r\n          if ( propertyTag === 'image' ) {\r\n            dataItem[propertyTag] = property.getAttribute('src');\r\n            continue;\r\n          }\r\n          dataItem[propertyTag] = property.textContent.trim();\r\n          // transform numeric values to float number type\r\n          if ( !isNaN(dataItem[propertyTag]) ) {\r\n            dataItem[propertyTag] = parseFloat(dataItem[propertyTag]);\r\n          }\r\n        }\r\n        dataArray.push(dataItem);\r\n      }\r\n      setData(dataArray);\r\n      console.log('XML data is processed successfully');\r\n    } catch {\r\n      console.log('Error in the obtained XML data');\r\n    }  \r\n  }\r\n\r\n  // handler for a click on request button\r\n  // dataSource - data filename without extension\r\n  // method - AJAX method\r\n  // extension - data file extension\r\n  const handleRequest = (event, dataSource, method, extension) => {\r\n    event.preventDefault(); // prevents page refresh and reset state to initial value\r\n    const dataFileName = dataSource + '.' + extension;\r\n    const dataPath = process.env.PUBLIC_URL + \"/data/\" + dataFileName;\r\n    switch (method) {\r\n      case 'XMLHttpRequest': \r\n        getXMLHttp(dataPath, extension); \r\n        break;\r\n      case 'Fetch': \r\n        getFetch(dataPath, extension);\r\n        break;\r\n      default:\r\n        console.log('Error in selection of request method');\r\n    };\r\n    console.log('--- ' + (new Date()).toLocaleTimeString() + ' - New request ---');\r\n    console.log('Selected method: ' + method);\r\n    console.log('Selected data: ' + dataFileName);   \r\n  }\r\n\r\n  // handler for selecting item in the data table\r\n  const handleSelectItem = (id) => {\r\n    console.log('ID of selected item: ' + id);\r\n    setIdSelected(id);\r\n  }\r\n\r\n  return (\r\n    <div className=\"DataContainer\">\r\n      <div className=\"column left\">\r\n        <DataRequest handleRequest={handleRequest} />\r\n      </div>\r\n      <div className=\"column center\">\r\n        <DataTable \r\n          dataArray={data} \r\n          requestParameters={requestParameters}\r\n          handleSelect={handleSelectItem}\r\n        />\r\n      </div>\r\n      <div className=\"column right\">\r\n        <DataItem item={data[idSelected-1]} />\r\n      </div>\r\n    </div>\r\n  );\r\n}","/*     App.js     */\r\n/* root component */\r\n\r\nimport React from 'react';\r\n\r\nimport '../styles/App.scss';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport DataContainer from './DataContainer';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <DataContainer />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*  index.js   */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}