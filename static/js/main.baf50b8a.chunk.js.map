{"version":3,"sources":["components/Header.js","components/Footer.js","components/DataRequest.js","components/DataTable.js","components/DataItem.js","api/processData.js","api/getData.js","components/DataContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","href","DataRequest","handleRequest","useState","method","setMethod","extension","setExtension","onSubmit","event","preventDefault","id","value","readOnly","disabled","onChange","target","onClick","DataTable","dataArray","requestParameters","handleSelect","length","idSelected","tagName","rowSelected","parentNode","previousSelected","getElementsByClassName","classList","remove","add","firstChild","textContent","map","item","DataTableItem","key","style","textTransform","time","name","console","log","DataItem","image","src","process","alt","description","density","processJSON","dataString","JSON","parse","processXML","dataXML","getElementsByTagName","dataItem","getAttribute","children","property","propertyTag","trim","isNaN","parseFloat","push","dataPath","a","requestResult","startTime","Date","now","fetch","response","ok","text","data","DOMParser","parseFromString","parameters","Promise","resolve","DataContainer","setData","setIdSelected","setRequestParameters","stateCallback","dataSource","request","XMLHttpRequest","onreadystatechange","this","readyState","status","responseText","responseXML","open","send","getXMLHttp","getFetch","then","toLocaleTimeString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.baf50b8a.chunk.js","sourcesContent":["/*    Header.js     */\r\n/* header component */\r\n\r\nimport React from 'react';\r\nimport '../styles/Header.scss';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1>\r\n      \tData Request App\r\n      </h1>\r\n      <p>\r\n      \tSimple SPA created with React\r\n      </p>\r\n    </header>\r\n  );\r\n}","/*    Footer.js     */\r\n/* footer component */\r\n\r\nimport React from 'react';\r\nimport '../styles/Footer.scss';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer className=\"Footer\">\r\n      Source files are located in&nbsp;  \r\n\t  <a href=\"https://github.com/andevadm/data-request\">GitHub&nbsp;repository</a>\r\n    </footer>\r\n  );\r\n}","/*     DataRequest.js     */\r\n/* request form component */\r\n\r\nimport React, { useState } from 'react';\r\nimport '../styles/DataRequest.scss';\r\n\r\nexport default function DataRequest({handleRequest}) {\r\n\r\n  // state with selected method of request\r\n  const [method, setMethod] = useState('Fetch');\r\n  // state with selected extension of data\r\n  const [extension, setExtension] = useState('json');\r\n  // name of data file without extension\r\n  // only one data source is present, state is not necessary\r\n  const dataSource = 'materials';\r\n\r\n  // handler for selecting method of request\r\n  const handleSelectMethod = (event) => setMethod(event.target.value);\r\n\r\n  // handler for selecting extension of data\r\n  const handleSelectExtension = (event) => setExtension(event.target.value);\r\n\r\n  return (\r\n    <div className=\"DataRequest\">\r\n      <h2>\r\n      \tData Request Form\r\n      </h2>\r\n      <form onSubmit={event => event.preventDefault()}>\r\n        <label>\r\n          Data source:\r\n          <select id=\"database\" value={dataSource} readOnly disabled>\r\n            <option value={dataSource}>{dataSource}</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          Select request method:\r\n          <select id=\"method\" value={method} onChange={handleSelectMethod}>\r\n            <option value=\"Fetch\">Fetch</option>\r\n            <option value=\"XMLHttpRequest\">XMLHttpRequest</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          Select data extension:\r\n          <select id=\"extension\" value={extension} onChange={handleSelectExtension}>\r\n            <option value=\"json\">JSON</option>\r\n            <option value=\"xml\">XML</option>\r\n          </select>\r\n        </label>\r\n      \t<label>\r\n          Press the button to obtain data\r\n      \t  <button id=\"request\" onClick={ (event) => handleRequest(event, dataSource, method, extension) }>\r\n            Request\r\n          </button>\r\n        </label>\r\n      </form>\r\n    </div>\r\n  );\r\n}","/*   DataTable.js   */\r\n/* component with obtained data and parameters of response */\r\n\r\nimport React from 'react';\r\nimport '../styles/DataTable.scss';\r\n\r\nexport default function DataTable({dataArray, requestParameters, handleSelect}) {\r\n\r\n  // handler for click on the table\r\n  const handleClick = (event) => {\r\n    let idSelected;\r\n    if ( event.target.tagName === 'TD' ) {\r\n      const rowSelected = event.target.parentNode;\r\n      const previousSelected = rowSelected.parentNode.getElementsByClassName('selected')[0];\r\n      // remove previous selection\r\n      if ( previousSelected ) {\r\n        previousSelected.classList.remove(\"selected\");\r\n      }\r\n      // add new selection\r\n      if ( rowSelected !== previousSelected ) {\r\n        rowSelected.classList.add(\"selected\");\r\n        idSelected = +rowSelected.firstChild.textContent;\r\n      // or remove current selection\r\n      } else {\r\n        idSelected = -1;\r\n      }\r\n      // process data item\r\n      handleSelect(idSelected);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"DataTable\">\r\n      {\r\n        (!dataArray || dataArray.length === 0) ? \r\n          <h2>Data is not obtained</h2> :\r\n          <>\r\n            <h2>\r\n              Obtained Data\r\n            </h2>       \r\n            <table onClick={handleClick}>\r\n              <tbody>\r\n                {\r\n                  dataArray.map( (item) =>\r\n                    <DataTableItem key={item.id} item={item} />\r\n                  )\r\n                }\r\n              </tbody>        \r\n            </table>\r\n            <div className=\"request-parameters\">\r\n              {\r\n                (!requestParameters || typeof requestParameters !== 'object') ? \r\n                  <p>Request parameters are unknown</p> :\r\n                  <>\r\n                    <p className=\"request-parameters-method\">\r\n                      Get method: <em>{ requestParameters.method || 'Unknown'}</em>\r\n                    </p>\r\n                    <p className=\"request-parameters-extension\">\r\n                      Data extension: <em style={{ textTransform: 'uppercase' }}> { requestParameters.extension || 'Unknown'}</em>\r\n                    </p>\r\n                    <p className=\"request-parameters-time\">\r\n                      Time of data processing: <em>{ requestParameters.time || '0'}&nbsp;ms</em>\r\n                    </p>\r\n                  </>\r\n              }\r\n            </div>\r\n          </>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\n/* component with the table item */\r\nexport function DataTableItem({item}) {\r\n  if (item && item.id) {\r\n    return (\r\n      <tr className=\"DataTableItem\">\r\n        <td className=\"item-id\">{item.id}</td>\r\n        <td className=\"item-name\">{item.name || \"No name\"}</td>\r\n      </tr>\r\n    )\r\n  } else {\r\n    console.log('Item of DataTable is empty or has no id');\r\n    return (<></>)\r\n  }\r\n}","/*     DataItem.js     */\r\n/* component with information about selected item in DataTable */\r\n\r\nimport React from 'react';\r\nimport '../styles/DataItem.scss';\r\n\r\nexport default function DataItem({item}) {\r\n  return (\r\n    <div className=\"DataItem\">\r\n      {\r\n      \t(!item) ?\r\n      \t<h2>No item is selected</h2> :\r\n      \t<>\r\n\t\t\t    <h2>\r\n\t\t\t      {item.name || \"No name\"}\r\n\t\t\t    </h2>\r\n\t\t\t    <div className=\"item-image\">\r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t(item.image) ?\r\n\t\t\t\t\t\t\t<img src={ process.env.PUBLIC_URL + \"/data/img/\" + item.image } alt={item.name} /> :\r\n\t\t\t\t\t\t\t\"No image\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"item-body\">\r\n\t\t\t\t\t  <div className=\"item-description\">\r\n\t\t\t\t\t    {item.description || \"No description\"}\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t\t  <div className=\"item-value\">\r\n\t\t\t\t\t    Density:  \r\n\t\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t\t(item.density) ?\r\n\t\t\t\t\t\t\t\t\t<em> {item.density}&nbsp;g/cm<sup>3</sup></em> :\r\n\t\t\t\t\t\t\t\t\t<em> no value</em>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t  \t}\r\n    </div>\r\n  );\r\n}","// processData.js\r\n// transforms different data formats to array with objects\r\n\r\n// get array from JSON string \r\nexport function processJSON(dataString) {\r\n  try {\r\n    return JSON.parse(dataString);\r\n  } catch {\r\n    console.log('processJSON: error in the obtained JSON data');\r\n    return [];\r\n  }  \r\n}\r\n\r\n// get array from XML object\r\nexport function processXML(dataXML) {\r\n  try {\r\n    let dataArray = [];\r\n    for (let item of dataXML.getElementsByTagName(\"item\")) {\r\n      let dataItem = {}; // item of data array\r\n      dataItem.id = +item.getAttribute('id');\r\n      for (let property of item.children) {\r\n        const propertyTag = property.tagName;\r\n        if ( propertyTag === 'image' ) {\r\n          dataItem[propertyTag] = property.getAttribute('src');\r\n          continue;\r\n        }\r\n        dataItem[propertyTag] = property.textContent.trim();\r\n        // transform numeric values to float number type\r\n        if ( !isNaN(dataItem[propertyTag]) ) {\r\n          dataItem[propertyTag] = parseFloat(dataItem[propertyTag]);\r\n        }\r\n      }\r\n      dataArray.push(dataItem);\r\n    }\r\n    return dataArray;\r\n  } catch {\r\n    console.log('processXML: error in the obtained XML data');\r\n    return [];\r\n  }  \r\n}","// getData.js\r\n// get data by different AJAX methods\r\n\r\nimport { processJSON, processXML } from './processData'\r\n\r\n// get data by Fetch from URL in dataPath\r\n// extension - data file extension\r\nexport async function getFetch(dataPath, extension) {\r\n  let requestResult = {};\r\n  let dataString, dataXML;\r\n  const startTime = Date.now();\r\n  try {\r\n    let response = await fetch(dataPath);\r\n    if (response.ok) {\r\n      console.log('getFetch: fetch response is ready');\r\n      // response.json is not used to apply the same data processing functions for all request methods\r\n      dataString = await response.text();\r\n      switch (extension) {\r\n        case 'json':\r\n          requestResult.data = processJSON(dataString);\r\n          break;\r\n        case 'xml':                       \r\n          dataXML = (new DOMParser()).parseFromString(dataString,\"text/xml\");\r\n          requestResult.data = processXML(dataXML);\r\n          break;\r\n        default:\r\n          requestResult.data = [];\r\n          console.log('getFetch: data extension is not supported');\r\n      }\r\n      requestResult.parameters = { \r\n        time: Date.now() - startTime, \r\n        method: 'Fetch',\r\n        extension: extension \r\n      }\r\n      //console.log('Fetch result: ' + JSON.stringify(requestResult));\r\n      return Promise.resolve(requestResult);   \r\n    }\r\n  } catch {\r\n    console.log('getFetch: error within request');\r\n    return Promise.resolve([]);\r\n  }\r\n}\r\n\r\n// get data by XMLHttpRequest from URL in dataPath\r\n// extension - data file extension\r\n// stateCallback - callback changing state of the used component\r\nexport function getXMLHttp(dataPath, extension, stateCallback) {\r\n  let requestResult = {};\r\n  let dataString, dataXML;\r\n  const startTime = Date.now();\r\n  try {\r\n    let request = new XMLHttpRequest();\r\n    // old method using onreadystatechange event is selected \r\n    request.onreadystatechange = function() {\r\n      if (this.readyState === 4 && this.status === 200) {\r\n        console.log('getXMLHttp: XMLHttpRequest is ready');\r\n        switch (extension) {\r\n          case 'json':\r\n            dataString = this.responseText;\r\n            requestResult.data = processJSON(dataString);\r\n            break;\r\n          case 'xml':\r\n            dataXML = this.responseXML;\r\n            requestResult.data = processXML(dataXML);\r\n            break;\r\n          default:\r\n            requestResult.data = [];\r\n            console.log('getXMLHttp: data extension is not supported');\r\n        }\r\n        requestResult.parameters = { \r\n          time: Date.now() - startTime, \r\n          method: 'XMLHttpRequest',\r\n          extension: extension \r\n        };\r\n        //console.log('XMLHttpRequest result: ' + JSON.stringify(requestResult));\r\n        stateCallback(requestResult);\r\n      }\r\n    }\r\n    request.open(\"GET\", dataPath, true);\r\n    request.send();\r\n  } catch {\r\n    console.log('getXMLHttp: error within request');\r\n  }\r\n}","/*       DataContainer.js          */\r\n/* layout and state root component */\r\n\r\nimport React, { useState } from 'react';\r\n\r\nimport '../styles/DataContainer.scss';\r\nimport DataRequest from './DataRequest';\r\nimport DataTable from './DataTable';\r\nimport DataItem from './DataItem';\r\nimport { getFetch, getXMLHttp } from '../api/getData';\r\n\r\nexport default function DataContainer() {\r\n\r\n  // state with data array from server\r\n  const [data, setData] = useState([]);\r\n  // state with id of selected data item\r\n  const [idSelected, setIdSelected] = useState(-1);\r\n  // state with request parameters:\r\n  const [requestParameters, setRequestParameters] = useState(\r\n      {\r\n        time: 0, // time of data processing from the beginning of request\r\n        method: 'Fetch', // AJAX method\r\n        extension: 'json' // extension of data file on a server\r\n      }\r\n    );\r\n\r\n  // handler for a click on request button\r\n  // dataSource - data filename without extension\r\n  // method - AJAX method\r\n  // extension - data file extension\r\n  const handleRequest = (event, dataSource, method, extension) => {\r\n    event.preventDefault(); // prevents page refresh and reset state to initial value\r\n    const dataFileName = dataSource + '.' + extension;\r\n    const dataPath = process.env.PUBLIC_URL + \"/data/\" + dataFileName;\r\n    switch (method) {\r\n      case 'XMLHttpRequest': \r\n        getXMLHttp(dataPath, extension, stateCallback);\r\n        break;\r\n      case 'Fetch': \r\n        getFetch(dataPath, extension).then(stateCallback);\r\n        break;\r\n      default:\r\n        console.log('handleRequest: request method is not supported');\r\n    };\r\n    console.log('--- ' + (new Date()).toLocaleTimeString() + ' - New request ---');\r\n    console.log('Selected method: ' + method);\r\n    console.log('Selected data: ' + dataPath);\r\n  }\r\n\r\n  // callback setting state according to result of the request\r\n  const stateCallback = (requestResult) => {\r\n    //console.log('stateCallback data: ' + JSON.stringify(requestResult));\r\n    setData(requestResult.data);\r\n    setRequestParameters(requestResult.parameters);\r\n  }\r\n\r\n  // handler for selecting item in the data table\r\n  const handleSelectItem = (id) => {\r\n    console.log('ID of selected item: ' + id);\r\n    setIdSelected(id);\r\n  }\r\n\r\n  return (\r\n    <div className=\"DataContainer\">\r\n      <div className=\"column left\">\r\n        <DataRequest handleRequest={handleRequest} />\r\n      </div>\r\n      <div className=\"column center\">\r\n        <DataTable \r\n          dataArray={data} \r\n          requestParameters={requestParameters}\r\n          handleSelect={handleSelectItem}\r\n        />\r\n      </div>\r\n      <div className=\"column right\">\r\n        <DataItem item={data[idSelected-1]} />\r\n      </div>\r\n    </div>\r\n  );\r\n}","/*     App.js     */\r\n/* root component */\r\n\r\nimport React from 'react';\r\n\r\nimport '../styles/App.scss';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport DataContainer from './DataContainer';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <DataContainer />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*  index.js   */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}